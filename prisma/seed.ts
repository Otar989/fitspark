/* eslint-disable no-console */
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// 10 –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö UUID (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏–º–∏)
const userIds = [
  "11111111-1111-1111-1111-111111111111",
  "22222222-2222-2222-2222-222222222222",
  "33333333-3333-3333-3333-333333333333",
  "44444444-4444-4444-4444-444444444444",
  "55555555-5555-5555-5555-555555555555",
  "66666666-6666-6666-6666-666666666666",
  "77777777-7777-7777-7777-777777777777",
  "88888888-8888-8888-8888-888888888888",
  "99999999-9999-9999-9999-999999999999",
  "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
];

const challengeData = [
  {
    title: "10,000 –®–∞–≥–æ–≤ –≤ –î–µ–Ω—å",
    description: "–•–æ–¥–∏—Ç–µ 10,000 —à–∞–≥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    target: 10000,
    unit: "—à–∞–≥–æ–≤",
    icon: "üö∂",
    category: "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
  },
  {
    title: "2 –õ–∏—Ç—Ä–∞ –í–æ–¥—ã",
    description: "–ü–µ–π—Ç–µ 2 –ª–∏—Ç—Ä–∞ —á–∏—Å—Ç–æ–π –≤–æ–¥—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è",
    target: 2000,
    unit: "–º–ª",
    icon: "üíß",
    category: "–ø–∏—Ç–∞–Ω–∏–µ"
  },
  {
    title: "30 –û—Ç–∂–∏–º–∞–Ω–∏–π",
    description: "–î–µ–ª–∞–π—Ç–µ 30 –æ—Ç–∂–∏–º–∞–Ω–∏–π –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º—ã—à—Ü",
    target: 30,
    unit: "—Ä–∞–∑",
    icon: "üí™",
    category: "—Å–∏–ª–æ–≤–∞—è"
  },
  {
    title: "–ß–∏—Ç–∞—Ç—å 20 –°—Ç—Ä–∞–Ω–∏—Ü",
    description: "–ß–∏—Ç–∞–π—Ç–µ 20 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —É–º–∞",
    target: 20,
    unit: "—Å—Ç—Ä–∞–Ω–∏—Ü",
    icon: "üìö",
    category: "—Ä–∞–∑–≤–∏—Ç–∏–µ"
  },
  {
    title: "5 –ú–∏–Ω—É—Ç –ú–µ–¥–∏—Ç–∞—Ü–∏–∏",
    description: "–ú–µ–¥–∏—Ç–∏—Ä—É–π—Ç–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ–∫–æ—è",
    target: 5,
    unit: "–º–∏–Ω—É—Ç",
    icon: "üßò",
    category: "–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ",
    premium: true
  },
  {
    title: "8 –ß–∞—Å–æ–≤ –°–Ω–∞",
    description: "–°–ø–∏—Ç–µ 8 —á–∞—Å–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
    target: 8,
    unit: "—á–∞—Å–æ–≤",
    icon: "üò¥",
    category: "—Å–æ–Ω"
  },
  {
    title: "–ü–ª–∞–Ω–∫–∞ 1 –ú–∏–Ω—É—Ç–∞",
    description: "–î–µ—Ä–∂–∏—Ç–µ –ø–ª–∞–Ω–∫—É 1 –º–∏–Ω—É—Ç—É –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ—Ä–∞",
    target: 60,
    unit: "—Å–µ–∫—É–Ω–¥",
    icon: "üèãÔ∏è",
    category: "—Å–∏–ª–æ–≤–∞—è",
    premium: true
  },
  {
    title: "–ò–∑—É—á–∏—Ç—å 10 –ù–æ–≤—ã—Ö –°–ª–æ–≤",
    description: "–ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —è–∑—ã–∫–∞",
    target: 10,
    unit: "—Å–ª–æ–≤",
    icon: "üéì",
    category: "—Ä–∞–∑–≤–∏—Ç–∏–µ",
    premium: true
  }
];

async function seedChallenges() {
  console.log("Seeding challenges...");
  for (const challenge of challengeData) {
    await prisma.challenges.upsert({
      where: { title: challenge.title },
      update: {},
      create: challenge,
    } as any);
  }
}

async function seedProfiles() {
  console.log("Seeding profiles...");
  for (let i = 0; i < userIds.length; i++) {
    const id = userIds[i];
    const username = `user_${String(i + 1).padStart(2, "0")}`;
    await prisma.profiles.upsert({
      where: { id },
      update: { username, updated_at: new Date() as any },
      create: { id, username },
    } as any);
  }
}

async function seedUsers() {
  console.log("Seeding users...");
  // Skip users seeding since the model might not exist in current Prisma client
  console.log("Users seeding skipped - table may not exist yet");
}

async function seedScores() {
  console.log("Seeding user_scores...");
  // 10 –∑–∞–ø–∏—Å–µ–π —Å –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã–º score
  for (let i = 0; i < userIds.length; i++) {
    const user_id = userIds[i];
    const score = 10 + (i * 17) % 150; // –ø—Å–µ–≤–¥–æ-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    try {
      await prisma.user_scores.upsert({
        where: { user_id: user_id },
        update: { score: score },
        create: { user_id: user_id, score: score },
      } as any);
    } catch (e) {
      console.warn(`Skip score for ${user_id}:`, e);
    }
  }
}

async function seedBadges() {
  console.log("Seeding badges...");
  // Skip badges seeding since the model might not exist in current Prisma client
  console.log("Badges seeding skipped - table may not exist yet");
}

async function ensureLeaderboardView() {
  console.log("Ensuring leaderboard_view exists...");
  // –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ view –Ω–µ –æ–ø–∏—Å–∞–Ω –≤ Prisma ‚Äî —Å–æ–∑–¥–∞–¥–∏–º —á–µ—Ä–µ–∑ raw SQL
  await prisma.$executeRawUnsafe(`
    create or replace view leaderboard_view as
    select coalesce(p.username, left(cast(s.user_id as text), 8)) as username,
           s.user_id,
           s.score
    from user_scores s
    left join profiles p on p.id = s.user_id
    order by s.score desc;
  `);
}

async function main() {
  // –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü; –µ—Å–ª–∏ –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç ‚Äî –æ—Ç—Ä–∞–ø–æ—Ä—Ç—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
  try { await prisma.$queryRaw`select 1`; } catch (e) {
    console.error("DB connection failed:", e);
    process.exit(1);
  }

  // –ü–æ –æ—á–µ—Ä–µ–¥–∏, —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å—Ö–µ–º—ã:
  try { await seedChallenges(); } catch (e) { console.warn("Skip challenges (model missing?)", e); }
  try { await seedUsers(); } catch (e) { console.warn("Skip users (model missing?)", e); }
  try { await seedProfiles(); } catch (e) { console.warn("Skip profiles (model missing?)", e); }
  try { await seedScores(); } catch (e) { console.warn("Skip user_scores (model missing?)", e); }
  try { await seedBadges(); } catch (e) { console.warn("Skip badges (model missing?)", e); }
  try { await ensureLeaderboardView(); } catch (e) { console.warn("Skip view creation", e); }

  console.log("Seed finished.");
}

main()
  .then(async () => { await prisma.$disconnect(); })
  .catch(async (e) => { console.error(e); await prisma.$disconnect(); process.exit(1); });
