// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  auth_id     String   @unique @db.Uuid
  username    String?  @unique
  email       String?
  avatar_url  String?
  created_at  DateTime @default(now()) @db.Timestamptz
  updated_at  DateTime @default(now()) @db.Timestamptz

  // Relations
  user_challenges user_challenges[]
  completions     completions[]
  subscriptions   subscriptions[]
  user_badges     user_badges[]
  user_scores     user_scores[]
  payments        payments[]

  @@map("users")
}

model categories {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug        String   @unique
  name        String
  icon        String   @default("üéØ")
  color       String   @default("from-purple-500 to-indigo-500")
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz

  // Relations
  challenges challenges[]

  @@map("categories")
}

model challenges {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_id   String   @db.Uuid
  title         String
  description   String?
  difficulty    String   @default("easy") // easy, medium, hard
  target_value  Int      @default(1)
  target_unit   String   @default("times")
  duration_days Int      @default(30)
  points_reward Int      @default(10)
  is_premium    Boolean  @default(false)
  proof_required String  @default("text") // text, photo, video, number
  is_active     Boolean  @default(true)
  tasks         Json?    // JSON —Å –∑–∞–¥–∞—á–∞–º–∏
  created_at    DateTime @default(now()) @db.Timestamptz
  updated_at    DateTime @default(now()) @db.Timestamptz

  // Relations
  category       categories       @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user_challenges user_challenges[]
  completions     completions[]
  badges          badges[]

  @@map("challenges")
}

model user_challenges {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String    @db.Uuid
  challenge_id     String    @db.Uuid
  joined_at        DateTime  @default(now()) @db.Timestamptz
  completed_at     DateTime? @db.Timestamptz
  current_progress Decimal   @default(0) @db.Decimal(5,2) // Percentage: 0.00 - 100.00
  status           String    @default("active") // not_joined, active, completed
  created_at       DateTime  @default(now()) @db.Timestamptz
  updated_at       DateTime  @default(now()) @db.Timestamptz

  // Relations
  user      users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  challenge challenges @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  proofs    proofs[]

  @@unique([user_id, challenge_id])
  @@map("user_challenges")
}

model proofs {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_challenge_id String   @db.Uuid
  proof_type        String   @default("text") // text, photo, video, number
  proof_text        String?
  proof_number      Decimal?
  file_url          String?
  submitted_at      DateTime @default(now()) @db.Timestamptz
  is_verified       Boolean  @default(false)
  created_at        DateTime @default(now()) @db.Timestamptz

  // Relations
  user_challenge user_challenges @relation(fields: [user_challenge_id], references: [id], onDelete: Cascade)

  @@map("proofs")
}

model completions {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String   @db.Uuid
  challenge_id String   @db.Uuid
  value        Decimal  @default(1)
  proof_url    String?
  completed_at DateTime @default(dbgenerated("current_date")) @db.Date
  points       Int      @default(0)
  created_at   DateTime @default(now()) @db.Timestamptz

  // Relations
  user      users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  challenge challenges @relation(fields: [challenge_id], references: [id], onDelete: Cascade)

  @@unique([user_id, challenge_id, completed_at])
  @@map("completions")
}

model subscriptions {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id               String    @db.Uuid
  status                String // 'active', 'canceled', 'past_due', 'trialing'
  current_period_start  DateTime? @db.Timestamptz
  current_period_end    DateTime? @db.Timestamptz
  cancel_at_period_end  Boolean   @default(false)
  created_at            DateTime  @default(now()) @db.Timestamptz
  updated_at            DateTime  @default(now()) @db.Timestamptz

  // Relations
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model badges {
  id               String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String  @unique
  description      String?
  icon             String  @default("üèÜ")
  requirement_type String // 'streak', 'total', 'challenge_complete'
  requirement_value Int
  challenge_id     String? @db.Uuid
  created_at       DateTime @default(now()) @db.Timestamptz

  // Relations
  challenge   challenges?   @relation(fields: [challenge_id], references: [id], onDelete: Cascade)
  user_badges user_badges[]

  @@map("badges")
}

model user_badges {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id  String   @db.Uuid
  badge_id String   @db.Uuid
  earned_at DateTime @default(now()) @db.Timestamptz

  // Relations
  user  users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  badge badges @relation(fields: [badge_id], references: [id], onDelete: Cascade)

  @@unique([user_id, badge_id])
  @@map("user_badges")
}

model profiles {
  id         String   @id @db.Uuid
  username   String?
  updated_at DateTime @default(now()) @db.Timestamptz

  @@map("profiles")
}

model user_scores {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String @db.Uuid
  score          Int    @default(0)
  current_streak Int    @default(0)
  best_streak    Int    @default(0)
  last_activity  DateTime? @db.Date

  // Relations
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id])
  @@map("user_scores")
}

model payments {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  payment_id  String   @unique
  user_id     String   @db.Uuid
  amount      Decimal
  status      String   // 'pending', 'succeeded', 'canceled'
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz
  updated_at  DateTime @default(now()) @db.Timestamptz

  // Relations
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("payments")
}
