import { NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export const dynamic = 'force-dynamic'

// Mock badges data for fallback
const mockBadges = [
  {
    id: '1',
    name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂',
    icon: 'üåü',
    requirement_type: 'total',
    requirement_value: 1,
    created_at: new Date().toISOString()
  },
  {
    id: '2',
    name: '–ê–∫—Ç–∏–≤–∏—Å—Ç',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 10 —á–µ–ª–ª–µ–Ω–¥–∂–µ–π',
    icon: 'üî•',
    requirement_type: 'total',
    requirement_value: 10,
    created_at: new Date().toISOString()
  },
  {
    id: '3',
    name: '–°–µ—Ä–∏–π–Ω–∏–∫',
    description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: '‚ö°',
    requirement_type: 'streak',
    requirement_value: 7,
    created_at: new Date().toISOString()
  }
]

export async function GET() {
  try {
    const supabase = createClient()
    
    const { data: badges, error } = await supabase
      .from('badges')
      .select('*')
      .order('created_at', { ascending: true })

    if (error) {
      console.warn('Supabase error, using mock data:', error.message)
      return NextResponse.json({ badges: mockBadges })
    }

    return NextResponse.json({ badges })
  } catch (error) {
    console.warn('Supabase connection failed, using mock data:', error)
    return NextResponse.json({ badges: mockBadges })
  }
}